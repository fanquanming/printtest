/// <reference path="jquery-1.11.0.js" />

///CS
if ($ && typeof ($.extend) == "function") {
    $.extend({ cs: { pageUrl: window.location.href } });
    $.extend($.cs, {
        callServer: function (cid, method, jsonArgs, postData, success, error, complete) {
            var eventData = {
                __VIEWSTATE: $('#__VIEWSTATE').val(),
                __EVENTTARGET: $('#__EVENTTARGET').val(),
                __EVENTARGUMENT: $('#__EVENTARGUMENT').val(),
                __EVENTVALIDATION: $('#__EVENTVALIDATION').val(),
                __CALLBACKID: cid,
                __CALLBACKPARAM: JSON.stringify({
                    'method': method,
                    'args': jsonArgs
                })
            };

            var formData = null;
            if (postData != null) {
                formData = postData;
                for (var attr in eventData) {
                    postData[attr] = eventData[attr];
                }
            } else {
                formData = eventData;
            }

            $.ajax($.cs.pageUrl,
            {
                data: formData,
                dataType: 'text',
                type: 'POST',
                success: function (response) {
                    var c = response.charAt(0);
                    var regex = /\d+\|$/;
                    if (c == "s") {
                        if (typeof (success) == "function") {
                            success($.parseJSON(response.substring(1).replace(regex, '')));
                        }
                    } else if (c == "e") {
                        if (typeof (error) == "function") {
                            error(response.substring(1).replace(regex, ''));
                        }
                    } else {
                        var separatorIndex = response.indexOf("|");
                        if (separatorIndex != -1) {
                            var validationFieldLength = parseInt(response.substring(0, separatorIndex));
                            if (!isNaN(validationFieldLength)) {
                                var validationField = response.substring(separatorIndex + 1, separatorIndex + validationFieldLength + 1);
                                if (typeof (success) == "function") {
                                    success($.parseJSON(response.substring(separatorIndex + validationFieldLength + 1)));
                                }
                            }
                        }
                    }
                },
                error: function (xhr, errMsg) {
                    if (typeof (error) == "function") {
                        error(errMsg);
                    }
                },
                complete: function () {
                    if (typeof (complete) == "function") {
                        complete();
                    }
                }
            });
        }
    });
}



///JSON
if (typeof JSON !== 'object') {
    JSON = {};
}

(function () {
    'use strict';

    function f(n) {
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function () {
            return isFinite(this.valueOf())
                ? this.getUTCFullYear() + '-' +
                    f(this.getUTCMonth() + 1) + '-' +
                    f(this.getUTCDate()) + 'T' +
                    f(this.getUTCHours()) + ':' +
                    f(this.getUTCMinutes()) + ':' +
                    f(this.getUTCSeconds()) + 'Z'
                : null;
        };

        String.prototype.toJSON =
            Number.prototype.toJSON =
            Boolean.prototype.toJSON = function () {
                return this.valueOf();
            };
    }

    var cx,
        escapable,
        gap,
        indent,
        meta,
        rep;

    function q(text) {
        escapable.lastIndex = 0;
        return escapable.test(text) ? '"' + text.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + text + '"';
    }

    function s(key, holder) {
        var i,
            k,
            v,
            length,
            mind = gap,
            partial,
            value = holder[key];

        if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

        switch (typeof value) {
            case 'string':
                return q(value);

            case 'number':
                return isFinite(value) ? String(value) : 'null';

            case 'boolean':
            case 'null':
                return String(value);

            case 'object':
                if (!value) {
                    return 'null';
                }

                gap += indent;
                partial = [];

                if (Object.prototype.toString.apply(value) === '[object Array]') {
                    length = value.length;
                    for (i = 0; i < length; i += 1) {
                        partial[i] = s(i, value) || 'null';
                    }

                    v = partial.length === 0
                        ? '[]'
                        : gap
                        ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                        : '[' + partial.join(',') + ']';
                    gap = mind;
                    return v;
                }

                if (rep && typeof rep === 'object') {
                    length = rep.length;
                    for (i = 0; i < length; i += 1) {
                        if (typeof rep[i] === 'string') {
                            k = rep[i];
                            v = s(k, value);
                            if (v) {
                                partial.push(q(k) + (gap ? ': ' : ':') + v);
                            }
                        }
                    }
                } else {

                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = s(k, value);
                            if (v) {
                                partial.push(q(k) + (gap ? ': ' : ':') + v);
                            }
                        }
                    }
                }

                v = partial.length === 0
                    ? '{}'
                    : gap
                    ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                    : '{' + partial.join(',') + '}';
                gap = mind;
                return v;
        }
    }

    if (typeof JSON.stringify !== 'function') {
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
        meta = {
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"': '\\"',
            '\\': '\\\\'
        };
        JSON.stringify = function (value, replacer, space) {
            var i;
            gap = '';
            indent = '';

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }
            } else if (typeof space === 'string') {
                indent = space;
            }

            rep = replacer;
            if (replacer && typeof replacer !== 'function' &&
                    (typeof replacer !== 'object' ||
                    typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

            return s('', { '': value });
        };
    }
}());

//$.stringifyJSON()
$.extend({
    stringifyJSON: JSON.stringify
});
